openapi: "3.0.1"
info:
  version: 1.0.1
  title: Velo Payments APIs
  x-logo:
    url: 'https://velopayments.com/images/velo-logo.svg'
  description: |
    ## Terms and Definitions
    Throughout this document and the Velo platform the following terms are used:
    
    * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout.
    * **Payee.** The recipient of funds paid out by a payor.
    * **Payment.** A single transfer of funds from a payor to a payee.
    * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee.
    * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.
    
    ## Overview
    The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:
    
    * Authenticate with the Velo platform
    * Maintain a collection of payees
    * Query the payor’s current balance of funds within the platform and perform additional funding
    * Issue payments to payees
    * Query the platform for a history of those payments
    
    This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.
    
    ## API Considerations
    The Velo Payments API is REST based and uses the JSON format for requests and responses.
    
    Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.
    
    Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).
    
    Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.
    
    ## Authenticating with the Velo Platform
    Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.
    
    You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:

    create a string comprising the API key (e.g. **abcdef**) and API secret (e.g. 123456) with a colon between them. E.g. **abcdef:123456**

    base64 encode this string. E.g.: **YWJjZGVmOjEyMzQ1Ngo=**

    create an HTTP **Authorization** header with the value set to e.g. Basic **YWJjZGVmOjEyMzQ1Ngo=**

    perform the Velo authentication REST call using the HTTP header created above e.g. via curl:

    ```bash
      curl -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization: Basic YWJjZGVmOjEyMzQ1Ngo=" \
      'https://api.sandbox.velopayments.com/oauth/token?grant_type=client_credentials'
    ```

    If successful, this call will result in a **200** HTTP status code and a response body such as:
    
    ```json
      {
        "access_token":"19f6bafd-93fd-4747-b229-00507bbc991f",
        "token_type":"bearer",
        "expires_in":1799,
        "scope":"..."
      }
    ```
    ## API access following authentication
    Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.

    This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:
    
    ```
      -H "Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f "
    ``` 
    
    If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response.
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://api.sandbox.velopayments.com/
    description: Velo Payments Sandbox for testing
security: 
  - oAuthVelo: []
tags:
  - name: Payee Service
    description: |
      A payee is a person you wish to transfer money to. In this section you will find API opertions for working with Payees.
  - name: Payor Service
    description: A Payor is the entity which is sending money. Here you will find the available APIs for working with Payors.
  - name: Payout Service
    description: Payout Service APIs allow you to create and instruct payouts to payees.
  - name: Payment Audit Service
    description: Payment Audit Service APIs allow you to see payment history to payees.
  - name: Invite Service
    description: APIs which allows you to work with payees invited to the Velo Platform.
  - name: Legal
    description: |
      <p>This document, including all counts herein, and the Velo Payments API are the intellectual property
      of Velo Payments. The Velo Payment API and your use of the Velo Payment API, is goverend by and subject to the
      Velo Payments Terms of Use</p>
      <p>&copy; Velo Payments, Inc.</p>
paths:
  /v1/payees:
    $ref: ./paths/payees.yaml
  /v1/payors/{payorId}:
    $ref: ./paths/payors.yaml
  /v1/payors/{payorId}/balance:
    $ref: ./paths/payorsGetBalance.yaml
  /v1/payors/{payorId}/payorFundingBankDetailsUpdate:
    $ref: ./paths/payorSetFundingBankDetails.yaml
  /v1/payors/{payorId}/achFundingRequest:
    $ref: ./paths/payorAchFundingRequest.yaml
  /v1/payors/{payorId}/applications:
    $ref: ./paths/payorCreateApplication.yaml
  /v1/payors/{payorId}/applications/{applicationId}/keys:
    $ref: ./paths/payorCreateKey.yaml
  /v1/payouts:
    $ref: ./paths/payout.yaml
  /v1/payouts/{payoutId}:
    $ref: ./paths/payoutInstruct.yaml
  /v1/payouts/?:
      $ref: ./paths/payoutCSV.yaml
  /v1/paymentaudit/payouts:
      $ref: ./paths/paymentAuditPayouts.yaml
  /v2/paymentaudit/payouts/{payoutId}:
      $ref: ./paths/paymentAuditPaymentsForPayout.yaml
  /v1/paymentaudit/payments/{paymentId}:
      $ref: ./paths/paymentAuditGetPayment.yaml
  /v1/paymentaudit/fundings:
      $ref: ./paths/paymentAuditGetFundings.yaml
  /v1/invites/{inviteId}:
      $ref: ./paths/inviteValidate.yaml
  /v1/invites/{inviteId}/smsTokens:
      $ref: ./paths/inviteValidateSMS.yaml
  /v1/invites/{inviteId}/smsTokens/validate:
      $ref: ./paths/inviteValidateSMSToken.yaml
components:
  securitySchemes:
    oAuthVelo:    
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        clientCredentials:
          tokenUrl: https://api.sandbox.velopayments.com/oauth/token
          scopes: {}
#  schemas:
#    Address:
#        $ref: ./definitions/model/Address.yaml
#    Challenge:
#        $ref: ./definitions/model/Challenge.yaml
#    Company:
#        $ref: ./definitions/model/Company.yaml
#    CreatePayeesRequest:
#        $ref: ./definitions/model/CreatePayeesRequest.yaml
#    Individual:
#        $ref: ./definitions/model/Individual.yaml
#    Links:
#        $ref: ./definitions/model/Links.yaml
#    Link:
#        $ref: ./definitions/model/Link.yaml
#    Name:
#        $ref: ./definitions/model/Name.yaml
#    Page:
#        $ref: ./definitions/model/Page.yaml
#    Payee:
#        $ref: ./definitions/model/Payee.yaml
#    PayeeDetails:
#        $ref: ./definitions/model/PayeeDetails.yaml
#    PayeeDetail:
#        $ref: ./definitions/model/PayeeDetail.yaml
#    PayorAchFundingRequest:
#        $ref: ./definitions/model/PayorAchFundingRequest.yaml
#    PaymentChannel:
#        $ref: ./definitions/model/PaymentChannel.yaml
#    PayorRefs:
#        $ref: ./definitions/model/PayorRefs.yaml
#    PayorRef:
#        $ref: ./definitions/model/PayorRef.yaml
#    Social:
#        $ref: ./definitions/model/Social.yaml
#  parameters:
#    pageSizeParam:
#        $ref: ./definitions/parameters/pageSizeParam.yaml
#    pageParam:
#        $ref: ./definitions/parameters/pageParam.yaml